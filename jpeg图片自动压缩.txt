写一个python程序，每10秒扫描当前文件夹以及子文件夹中所有jpeg文件，把其中大于4mb的文件转换为压缩品质90%的jpeg文件并覆盖原文件

要实现这个功能，你可以使用Python的`os`、`glob`和`PIL`（Pillow）库。以下是一个示例程序：

```python
import os
import time
from PIL import Image

def compress_jpeg_files(directory):
    # 使用glob查找所有jpeg文件
    jpeg_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.lower().endswith('.jpg') or file.lower().endswith('.jpeg'):
                jpeg_files.append(os.path.join(root, file))

    # 遍历所有jpeg文件
    for file_path in jpeg_files:
        file_size = os.path.getsize(file_path)
        if file_size > 4 * 1024 * 1024:  # 检查文件大小是否大于4MB
            try:
                with Image.open(file_path) as img:
                    # 压缩并覆盖原文件
                    img.save(file_path, "JPEG", quality=90)
                    print(f"Compressed and overwrote: {file_path}")
            except Exception as e:
                print(f"Failed to compress {file_path}: {e}")

def main():
    while True:
        compress_jpeg_files('.')  # 扫描当前目录及其子目录
        time.sleep(10)  # 等待10秒

if __name__ == "__main__":
    main()
```

### 代码说明：
1. **compress_jpeg_files(directory)**: 这个函数会扫描指定目录及其子目录中的所有JPEG文件，并检查每个文件的大小。如果文件大小大于4MB，则使用Pillow库将其压缩为质量90%的JPEG文件，并覆盖原文件。

2. **main()**: 这个函数是一个无限循环，每10秒调用一次`compress_jpeg_files`函数来扫描和压缩文件。

### 依赖库：
- **Pillow**: 用于图像处理。你可以通过以下命令安装：
  ```bash
  pip install pillow
  ```

### 注意事项：
- 该程序会覆盖原文件，请确保在运行前备份重要文件。
- 该程序会持续运行，直到手动停止。

你可以将这个程序保存为一个Python文件（例如`compress_jpeg.py`），然后在命令行中运行它：

```bash
python compress_jpeg.py
```

这样，程序就会每10秒扫描一次当前目录及其子目录，并压缩大于4MB的JPEG文件。