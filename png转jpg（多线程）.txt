user:
写一个python程序，使用与CPU线程数相同的线程数把当前目录下名称为“v2”的文件夹以及子文件夹中所有png文件转换为jpeg文件，保存到当前目录下的“v2_converted”文件夹并保持目录结构
assistant:
你可以使用Python的`concurrent.futures`模块来并行处理文件转换任务，并使用`os`和`shutil`模块来处理文件和目录操作。以下是一个示例程序，它会将当前目录下名为“v2”的文件夹及其子文件夹中的所有PNG文件转换为JPEG文件，并保存到“v2_converted”文件夹中，同时保持目录结构。

```python
import os
import concurrent.futures
from PIL import Image
import shutil

def convert_png_to_jpeg(png_path, jpeg_path):
    """将PNG文件转换为JPEG文件"""
    try:
        with Image.open(png_path) as img:
            img.convert('RGB').save(jpeg_path, 'JPEG')
        print(f"Converted: {png_path} -> {jpeg_path}")
    except Exception as e:
        print(f"Failed to convert {png_path}: {e}")

def process_directory(root_dir, output_dir):
    """遍历目录并处理PNG文件"""
    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.lower().endswith('.png'):
                png_path = os.path.join(root, file)
                relative_path = os.path.relpath(root, root_dir)
                output_subdir = os.path.join(output_dir, relative_path)
                os.makedirs(output_subdir, exist_ok=True)
                jpeg_path = os.path.join(output_subdir, os.path.splitext(file)[0] + '.jpg')
                yield png_path, jpeg_path

def main():
    root_dir = 'v2'
    output_dir = 'v2_converted'

    if not os.path.exists(root_dir):
        print(f"Directory '{root_dir}' does not exist.")
        return

    # 获取CPU核心数
    num_threads = os.cpu_count()

    # 使用线程池并行处理文件转换
    with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = []
        for png_path, jpeg_path in process_directory(root_dir, output_dir):
            futures.append(executor.submit(convert_png_to_jpeg, png_path, jpeg_path))

        # 等待所有任务完成
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"Error occurred: {e}")

if __name__ == "__main__":
    main()
```

### 代码说明：
1. **`convert_png_to_jpeg` 函数**：将PNG文件转换为JPEG文件，并保存到指定路径。
2. **`process_directory` 函数**：遍历“v2”目录及其子目录，生成PNG文件的路径和对应的JPEG文件路径。
3. **`main` 函数**：主函数，设置输入和输出目录，并使用线程池并行处理文件转换任务。

### 运行步骤：
1. 确保你已经安装了`Pillow`库（用于图像处理），可以通过以下命令安装：
   ```bash
   pip install pillow
   ```
2. 将上述代码保存为一个Python文件（例如`convert_png_to_jpeg.py`）。
3. 在终端中运行该脚本：
   ```bash
   python convert_png_to_jpeg.py
   ```

### 注意事项：
- 该程序会使用与CPU核心数相同的线程数来并行处理文件转换任务。
- 转换后的JPEG文件将保存在“v2_converted”文件夹中，并保持与“v2”文件夹相同的目录结构。
- 如果“v2_converted”文件夹已经存在，程序会继续在其中创建子目录和文件。
